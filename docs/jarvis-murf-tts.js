/**\n * Jarvis Murf AI Text-to-Speech Module\n * Integração com Murf AI TTS API\n * Compatível com GitHub Pages e sistema local\n */\n\nclass JarvisMurfTTS {\n    constructor() {\n        this.apiKey = 'ap2_294c1017-4d7d-48c5-be76-a497b886d21a'; // Sua chave API do Murf\n        this.isEnabled = true;\n        this.isSupported = true;\n        this.currentAudio = null;\n        this.baseUrl = 'https://api.murf.ai/v1';\n        \n        this.settings = {\n            voiceId: 'pt-BR-female-1', // Voz padrão\n            speed: 1.0,\n            pitch: 1.0,\n            volume: 0.8,\n            format: 'mp3',\n            autoSpeak: true,\n            fallbackToNative: true // Usar TTS nativo se Murf falhar\n        };\n        \n        // Vozes disponíveis do Murf AI para português\n        this.availableVoices = {\n            'pt-BR': {\n                'pt-BR-female-1': { \n                    name: 'Camila', \n                    gender: 'female', \n                    description: 'Voz feminina brasileira natural',\n                    style: 'conversational'\n                },\n                'pt-BR-female-2': { \n                    name: 'Beatriz', \n                    gender: 'female', \n                    description: 'Voz feminina brasileira profissional',\n                    style: 'professional'\n                },\n                'pt-BR-male-1': { \n                    name: 'Carlos', \n                    gender: 'male', \n                    description: 'Voz masculina brasileira natural',\n                    style: 'conversational'\n                },\n                'pt-BR-male-2': { \n                    name: 'Diego', \n                    gender: 'male', \n                    description: 'Voz masculina brasileira profissional',\n                    style: 'professional'\n                }\n            }\n        };\n        \n        this.init();\n    }\n\n    init() {\n        console.log('🎤 Inicializando Murf AI TTS...');\n        \n        // Carregar configurações salvas\n        this.loadSettings();\n        \n        // Adicionar controles à interface\n        this.addMurfTTSControls();\n        \n        console.log('✅ Murf AI TTS inicializado com sucesso!');\n    }\n\n    loadSettings() {\n        try {\n            const saved = localStorage.getItem('jarvis_murf_tts_settings');\n            if (saved) {\n                const parsedSettings = JSON.parse(saved);\n                this.settings = { ...this.settings, ...parsedSettings };\n                console.log('⚙️ Configurações Murf TTS carregadas');\n            }\n        } catch (error) {\n            console.warn('⚠️ Erro ao carregar configurações Murf TTS:', error);\n        }\n    }\n\n    saveSettings() {\n        try {\n            localStorage.setItem('jarvis_murf_tts_settings', JSON.stringify(this.settings));\n            console.log('💾 Configurações Murf TTS salvas');\n        } catch (error) {\n            console.warn('⚠️ Erro ao salvar configurações Murf TTS:', error);\n        }\n    }\n\n    async speak(text, options = {}) {\n        if (!text || !text.trim()) {\n            return Promise.resolve();\n        }\n\n        const cleanText = this.cleanText(text);\n        if (!cleanText) {\n            return Promise.resolve();\n        }\n\n        console.log('🗣️ Murf AI TTS falando:', cleanText);\n\n        // Se Murf TTS não estiver disponível, usar fallback\n        if (!this.isEnabled || !this.apiKey) {\n            if (this.settings.fallbackToNative && window.jarvisTTS) {\n                console.log('🔄 Usando TTS nativo como fallback');\n                return window.jarvisTTS.speak(cleanText, options);\n            }\n            return Promise.resolve();\n        }\n\n        try {\n            // Parar áudio anterior\n            this.stop();\n\n            // Preparar dados para a API do Murf\n            const requestData = {\n                text: cleanText,\n                voice_id: options.voiceId || this.settings.voiceId,\n                speed: options.speed || this.settings.speed,\n                pitch: options.pitch || this.settings.pitch,\n                volume: options.volume || this.settings.volume,\n                format: this.settings.format\n            };\n\n            // Fazer requisição para Murf AI TTS\n            const response = await fetch(`${this.baseUrl}/speech`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${this.apiKey}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(requestData)\n            });\n\n            if (!response.ok) {\n                throw new Error(`Murf AI API Error: ${response.status} ${response.statusText}`);\n            }\n\n            // Verificar se a resposta é áudio\n            const contentType = response.headers.get('content-type');\n            if (contentType && contentType.includes('audio')) {\n                // Resposta direta de áudio\n                const audioBlob = await response.blob();\n                await this.playAudioFromBlob(audioBlob);\n            } else {\n                // Resposta JSON com URL ou base64\n                const data = await response.json();\n                \n                if (data.audio_url) {\n                    await this.playAudioFromUrl(data.audio_url);\n                } else if (data.audio_data) {\n                    await this.playAudioFromBase64(data.audio_data);\n                } else {\n                    throw new Error('Formato de resposta não reconhecido');\n                }\n            }\n            \n            console.log('✅ Murf AI TTS reproduzido com sucesso');\n            \n        } catch (error) {\n            console.error('❌ Erro no Murf AI TTS:', error);\n            \n            // Usar fallback se configurado\n            if (this.settings.fallbackToNative && window.jarvisTTS) {\n                console.log('🔄 Usando TTS nativo como fallback após erro');\n                return window.jarvisTTS.speak(cleanText, options);\n            }\n            \n            throw error;\n        }\n    }\n\n    async playAudioFromBlob(audioBlob) {\n        return new Promise((resolve, reject) => {\n            try {\n                const audioUrl = URL.createObjectURL(audioBlob);\n                \n                // Criar elemento de áudio\n                this.currentAudio = new Audio(audioUrl);\n                \n                this.currentAudio.onended = () => {\n                    URL.revokeObjectURL(audioUrl);\n                    this.currentAudio = null;\n                    resolve();\n                };\n                \n                this.currentAudio.onerror = (error) => {\n                    URL.revokeObjectURL(audioUrl);\n                    this.currentAudio = null;\n                    reject(new Error('Erro ao reproduzir áudio'));\n                };\n                \n                // Reproduzir áudio\n                this.currentAudio.play();\n                \n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    async playAudioFromUrl(audioUrl) {\n        return new Promise((resolve, reject) => {\n            try {\n                // Criar elemento de áudio\n                this.currentAudio = new Audio(audioUrl);\n                \n                this.currentAudio.onended = () => {\n                    this.currentAudio = null;\n                    resolve();\n                };\n                \n                this.currentAudio.onerror = (error) => {\n                    this.currentAudio = null;\n                    reject(new Error('Erro ao reproduzir áudio'));\n                };\n                \n                // Reproduzir áudio\n                this.currentAudio.play();\n                \n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    async playAudioFromBase64(base64Audio) {\n        return new Promise((resolve, reject) => {\n            try {\n                // Converter base64 para blob\n                const binaryString = atob(base64Audio);\n                const bytes = new Uint8Array(binaryString.length);\n                for (let i = 0; i < binaryString.length; i++) {\n                    bytes[i] = binaryString.charCodeAt(i);\n                }\n                \n                const blob = new Blob([bytes], { type: 'audio/mpeg' });\n                const audioUrl = URL.createObjectURL(blob);\n                \n                // Criar elemento de áudio\n                this.currentAudio = new Audio(audioUrl);\n                \n                this.currentAudio.onended = () => {\n                    URL.revokeObjectURL(audioUrl);\n                    this.currentAudio = null;\n                    resolve();\n                };\n                \n                this.currentAudio.onerror = (error) => {\n                    URL.revokeObjectURL(audioUrl);\n                    this.currentAudio = null;\n                    reject(new Error('Erro ao reproduzir áudio'));\n                };\n                \n                // Reproduzir áudio\n                this.currentAudio.play();\n                \n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    cleanText(text) {\n        if (!text) return '';\n        \n        return text\n            // Remover emojis\n            .replace(/[\\u{1F600}-\\u{1F64F}]/gu, '')\n            .replace(/[\\u{1F300}-\\u{1F5FF}]/gu, '')\n            .replace(/[\\u{1F680}-\\u{1F6FF}]/gu, '')\n            .replace(/[\\u{1F1E0}-\\u{1F1FF}]/gu, '')\n            .replace(/[\\u{2600}-\\u{26FF}]/gu, '')\n            .replace(/[\\u{2700}-\\u{27BF}]/gu, '')\n            // Remover símbolos específicos\n            .replace(/[🤖🗣️📱✅❌⚠️🔄🔍🎯📡📝🌊🔙💬🚫⏱️🔌🎆💾⚙️🎤🌐🔑]/g, '')\n            // Limpar espaços\n            .replace(/\\s+/g, ' ')\n            .replace(/\\n/g, ' ')\n            .trim();\n    }\n\n    stop() {\n        if (this.currentAudio) {\n            this.currentAudio.pause();\n            this.currentAudio.currentTime = 0;\n            this.currentAudio = null;\n            console.log('⏹️ Murf AI TTS interrompido');\n        }\n    }\n\n    pause() {\n        if (this.currentAudio && !this.currentAudio.paused) {\n            this.currentAudio.pause();\n            console.log('⏸️ Murf AI TTS pausado');\n        }\n    }\n\n    resume() {\n        if (this.currentAudio && this.currentAudio.paused) {\n            this.currentAudio.play();\n            console.log('▶️ Murf AI TTS retomado');\n        }\n    }\n\n    toggle() {\n        this.isEnabled = !this.isEnabled;\n        this.saveSettings();\n        console.log(`🎤 Murf AI TTS ${this.isEnabled ? 'ativado' : 'desativado'}`);\n        \n        if (!this.isEnabled) {\n            this.stop();\n        }\n        \n        this.updateMurfTTSButton();\n    }\n\n    addMurfTTSControls() {\n        // Adicionar botão de toggle Murf TTS\n        const textInputDiv = document.getElementById('TextInput');\n        if (textInputDiv) {\n            const murfTtsBtn = document.createElement('button');\n            murfTtsBtn.id = 'MurfTTSBtn';\n            murfTtsBtn.className = 'glow-on-hover';\n            murfTtsBtn.innerHTML = '<i class=\"bi bi-soundwave\"></i>';\n            murfTtsBtn.title = 'Murf AI TTS';\n            murfTtsBtn.onclick = () => this.toggle();\n            \n            textInputDiv.appendChild(murfTtsBtn);\n            this.updateMurfTTSButton();\n        }\n\n        // Integrar com menu de configurações existente\n        this.integrateWithSettings();\n    }\n\n    updateMurfTTSButton() {\n        const murfTtsBtn = document.getElementById('MurfTTSBtn');\n        if (murfTtsBtn) {\n            const icon = murfTtsBtn.querySelector('i');\n            \n            if (this.isEnabled) {\n                icon.className = 'bi bi-soundwave';\n                murfTtsBtn.style.opacity = '1';\n                murfTtsBtn.style.color = '#ff6b35';\n                murfTtsBtn.title = 'Murf AI TTS Ativo - Clique para desativar';\n            } else {\n                icon.className = 'bi bi-volume-mute';\n                murfTtsBtn.style.opacity = '0.5';\n                murfTtsBtn.style.color = '';\n                murfTtsBtn.title = 'Murf AI TTS Inativo - Clique para ativar';\n            }\n        }\n    }\n\n    integrateWithSettings() {\n        // Adicionar opções do Murf TTS ao menu principal\n        const originalShowJarvisSettings = window.showJarvisSettings;\n        \n        window.showJarvisSettings = () => {\n            const options = [\n                '🔧 Configurar URL da API',\n                '🎤 Configurações de Voz',\n                '🌐 Google Cloud TTS',\n                '🎵 Murf AI TTS Premium',\n                '🧪 Testar Microfone',\n                '🔊 Testar Text-to-Speech',\n                '📊 Diagnóstico do Sistema',\n                '📝 Ver Logs do Console',\n                '❌ Cancelar'\n            ];\n            \n            const choice = prompt(`Configurações do Jarvis:\\n\\n${options.map((opt, i) => `${i + 1}. ${opt}`).join('\\n')}\\n\\nEscolha uma opção (1-${options.length}):`);\n            \n            switch(choice) {\n                case '4':\n                    this.showMurfTTSSettings();\n                    break;\n                default:\n                    // Chamar função original para outras opções\n                    if (originalShowJarvisSettings) {\n                        // Ajustar índice para função original\n                        const adjustedChoice = choice <= '3' ? choice : (parseInt(choice) - 1).toString();\n                        originalShowJarvisSettings(adjustedChoice);\n                    }\n                    break;\n            }\n        };\n    }\n\n    showMurfTTSSettings() {\n        const status = this.isEnabled ? '✅ Ativo' : '⏸️ Inativo';\n        const currentVoice = this.availableVoices['pt-BR'][this.settings.voiceId];\n        \n        const options = [\n            `📊 Status: ${status}`,\n            `🎤 Voz: ${currentVoice.name} (${currentVoice.description})`,\n            `⚡ Velocidade: ${this.settings.speed}`,\n            `🎵 Tom: ${this.settings.pitch}`,\n            `🔊 Volume: ${this.settings.volume}`,\n            `🔄 Fallback TTS Nativo: ${this.settings.fallbackToNative ? 'Sim' : 'Não'}`,\n            '🧪 Testar Murf AI TTS',\n            '📊 Informações da API',\n            '🔄 Resetar Configurações',\n            '❌ Voltar'\n        ];\n        \n        const choice = prompt(`Murf AI Text-to-Speech Premium:\\n\\n${options.map((opt, i) => `${i + 1}. ${opt}`).join('\\n')}\\n\\nEscolha uma opção (1-${options.length}):`);\n        \n        switch(choice) {\n            case '2':\n                this.selectMurfVoice();\n                break;\n            case '3':\n                this.adjustSpeed();\n                break;\n            case '4':\n                this.adjustPitch();\n                break;\n            case '5':\n                this.adjustVolume();\n                break;\n            case '6':\n                this.toggleFallback();\n                break;\n            case '7':\n                this.testMurfTTS();\n                break;\n            case '8':\n                this.showApiInfo();\n                break;\n            case '9':\n                this.resetMurfSettings();\n                break;\n            default:\n                return;\n        }\n    }\n\n    selectMurfVoice() {\n        const voices = this.availableVoices['pt-BR'];\n        const voiceOptions = Object.entries(voices).map(([id, info], index) => \n            `${index + 1}. ${info.name} - ${info.description} (${info.gender})`\n        );\n        \n        const choice = prompt(`Selecione uma voz do Murf AI:\\n\\n${voiceOptions.join('\\n')}\\n\\nDigite o número da voz:`);\n        \n        const voiceIndex = parseInt(choice) - 1;\n        const voiceIds = Object.keys(voices);\n        \n        if (voiceIndex >= 0 && voiceIndex < voiceIds.length) {\n            const selectedVoice = voiceIds[voiceIndex];\n            this.settings.voiceId = selectedVoice;\n            this.saveSettings();\n            alert(`✅ Voz selecionada: ${voices[selectedVoice].name}`);\n            this.testMurfTTS();\n        }\n    }\n\n    adjustSpeed() {\n        const newSpeed = prompt(`Velocidade da fala (0.5 - 2.0):\\n\\nAtual: ${this.settings.speed}\\n\\nDigite a nova velocidade:`, this.settings.speed);\n        const speed = parseFloat(newSpeed);\n        \n        if (!isNaN(speed) && speed >= 0.5 && speed <= 2.0) {\n            this.settings.speed = speed;\n            this.saveSettings();\n            alert(`✅ Velocidade ajustada para: ${speed}`);\n            this.testMurfTTS();\n        } else if (newSpeed !== null) {\n            alert('❌ Valor inválido. Use um número entre 0.5 e 2.0');\n        }\n    }\n\n    adjustPitch() {\n        const newPitch = prompt(`Tom da voz (0.5 - 2.0):\\n\\nAtual: ${this.settings.pitch}\\n\\nDigite o novo tom:`, this.settings.pitch);\n        const pitch = parseFloat(newPitch);\n        \n        if (!isNaN(pitch) && pitch >= 0.5 && pitch <= 2.0) {\n            this.settings.pitch = pitch;\n            this.saveSettings();\n            alert(`✅ Tom ajustado para: ${pitch}`);\n            this.testMurfTTS();\n        } else if (newPitch !== null) {\n            alert('❌ Valor inválido. Use um número entre 0.5 e 2.0');\n        }\n    }\n\n    adjustVolume() {\n        const newVolume = prompt(`Volume (0.1 - 1.0):\\n\\nAtual: ${this.settings.volume}\\n\\nDigite o novo volume:`, this.settings.volume);\n        const volume = parseFloat(newVolume);\n        \n        if (!isNaN(volume) && volume >= 0.1 && volume <= 1.0) {\n            this.settings.volume = volume;\n            this.saveSettings();\n            alert(`✅ Volume ajustado para: ${volume}`);\n            this.testMurfTTS();\n        } else if (newVolume !== null) {\n            alert('❌ Valor inválido. Use um número entre 0.1 e 1.0');\n        }\n    }\n\n    toggleFallback() {\n        this.settings.fallbackToNative = !this.settings.fallbackToNative;\n        this.saveSettings();\n        alert(`✅ Fallback para TTS nativo ${this.settings.fallbackToNative ? 'ativado' : 'desativado'}`);\n    }\n\n    testMurfTTS() {\n        if (!this.isEnabled) {\n            alert('❌ Murf AI TTS está desativado. Ative primeiro.');\n            return;\n        }\n        \n        const testPhrases = [\n            'Olá! Eu sou o Jarvis com Murf AI Text-to-Speech premium.',\n            'Sistema de voz de alta qualidade funcionando perfeitamente.',\n            'Qualidade de áudio superior com inteligência artificial.',\n            'Como posso ajudá-lo hoje com minha nova voz?'\n        ];\n        \n        const randomPhrase = testPhrases[Math.floor(Math.random() * testPhrases.length)];\n        this.speak(randomPhrase).catch(error => {\n            alert(`❌ Erro no teste: ${error.message}`);\n        });\n    }\n\n    showApiInfo() {\n        const info = `\n🎵 INFORMAÇÕES MURF AI TTS\n\n🔑 API Key: ${this.apiKey.substring(0, 10)}...${this.apiKey.substring(this.apiKey.length - 4)}\n\n✨ RECURSOS:\n• Vozes ultra-realistas com IA\n• Suporte a múltiplos idiomas\n• Controle avançado de prosódia\n• Qualidade de estúdio\n• Baixa latência\n\n🎤 VOZES DISPONÍVEIS:\n• Camila - Feminina conversacional\n• Beatriz - Feminina profissional\n• Carlos - Masculina conversacional\n• Diego - Masculina profissional\n\n🔗 DOCUMENTAÇÃO:\nhttps://docs.murf.ai/\n\n💰 PLANOS:\n• Starter: 10 horas/mês\n• Basic: 24 horas/mês\n• Pro: 48 horas/mês\n• Enterprise: Ilimitado\n        `;\n        \n        alert(info);\n    }\n\n    resetMurfSettings() {\n        if (confirm('🔄 Resetar todas as configurações do Murf AI TTS?')) {\n            this.settings = {\n                voiceId: 'pt-BR-female-1',\n                speed: 1.0,\n                pitch: 1.0,\n                volume: 0.8,\n                format: 'mp3',\n                autoSpeak: true,\n                fallbackToNative: true\n            };\n            \n            this.saveSettings();\n            alert('✅ Configurações do Murf AI TTS resetadas!');\n        }\n    }\n\n    // Método público para ser chamado pelo main.js\n    speakResponse(text) {\n        if (this.settings.autoSpeak && this.isEnabled) {\n            this.speak(text).catch(error => {\n                console.error('❌ Erro no Murf AI TTS:', error);\n            });\n        }\n    }\n}\n\n// Inicializar Murf TTS quando o documento estiver pronto\nlet jarvisMurfTTS = null;\n\n$(document).ready(function() {\n    // Aguardar um pouco para garantir que tudo foi carregado\n    setTimeout(() => {\n        jarvisMurfTTS = new JarvisMurfTTS();\n        \n        // Tornar disponível globalmente\n        window.jarvisMurfTTS = jarvisMurfTTS;\n        \n        console.log('🎵 Jarvis Murf AI TTS integrado com sucesso!');\n    }, 2000);\n});\n\n// Exportar para uso em outros scripts\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = JarvisMurfTTS;\n}